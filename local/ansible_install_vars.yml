---
GITHUB_ORG: CHOICE-Humanitarian
QUAYIO_ORG: computate
PROJECT_POWERED_BY_NAME: OpenShift Online
PROJECT_POWERED_BY_URL: https://access.redhat.com/products/openshift-online-red-hat
PROJECT_POWERED_BY_IMAGE_URI: /svg/openshift.svg
PROJECT_NAME: choice-reports
PROJECT_DISPLAY_NAME: CHOICE Reports
PROJECT_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ PROJECT_NAME }}.git"
PROJECT_REPO_HTTPS: "{{ PROJECT_REPO | replace('git@github.com:', 'https://github.com/') }}"
PROJECT_LANG: enUS
PROJECT_ZONE: "America/Denver"
PROJECT_LOCALE: "en-US"
PROJECT_SRC: "{{ lookup('env', 'HOME') }}/.local/src/{{ PROJECT_NAME }}"
PROJECT_POM_GROUP_ID: org.choicehumanitarian
PROJECT_POM_ARTIFACT_ID_ROOT: "{{ PROJECT_NAME }}"
PROJECT_POM_VERSION_PREFIX: "1.0.0"
PROJECT_POM_VERSION_SUFFIX: "-SNAPSHOT"
PROJECT_POM_VERSION: "{{ PROJECT_POM_VERSION_PREFIX }}{{ PROJECT_POM_VERSION_SUFFIX }}"
PROJECT_JAVA_PACKAGE: "{{ PROJECT_POM_GROUP_ID }}.reports.enus"
PROJECT_PORT: 12280
CLUSTER_PORT: "{{ PROJECT_PORT | regex_replace('(...)', '\\1') }}81"
JDBC_DATABASE: "{{ PROJECT_NAME }}"
JDBC_USERNAME: "{{ PROJECT_NAME }}"
SOLR_COLLECTION: "{{ PROJECT_NAME }}"
JAVA_OPTS: -XX:+UseParallelOldGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m -XX:ParallelGCThreads=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -XX:CICompilerCount=2 -XX:+ExitOnOutOfMemoryError
ENABLE_SESSION_ID: true
ENABLE_DELETED: true
ENABLE_ARCHIVED: true
ENABLE_ROLE_ADMIN: true
ENABLE_OPENID_CONNECT: true
ENABLE_CODE_GENERATION_SERVICE: true
WRITE_API: true
WRITE_COMMENTS: true
PROJECTS: 

  - GITHUB_ORG: "{{ GITHUB_ORG }}"
    PROJECT_NAME: "{{ PROJECT_NAME }}"
    PROJECT_SRC: "{{ PROJECT_SRC }}"
    PROJECT_JAVA_PACKAGE: "{{ PROJECT_JAVA_PACKAGE }}"
    PROJECT_FILES: 
      - path: "{{ PROJECT_SRC }}/bin/touch.sh"
        template: touch.sh
      - path: "{{ PROJECT_SRC }}/pom.xml"
        template: java/pom.xml
      - path: "{{ PROJECT_SRC }}/install.yml"
        template: ansible/install.yml
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/package-info.java"
        template: java/package-info.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_ConfigKeys | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_ConfigKeys }}.java"
        template: config/ConfigKeys.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteRequest | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteRequest }}.java"
        template: request/SiteRequestEnUS.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_PageLayout | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.java"
        template: page/PageLayout.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs"
        template: page/PageLayout.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_HomePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_HomePage }}.java"
        template: page/HomePage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs"
        template: page/HomePage.hbs
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.hbs"
        template: page/DynamicPage.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_MainVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_MainVerticle }}.java"
        template: vertx/MainVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_WorkerVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_WorkerVerticle }}.java"
        template: vertx/WorkerVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseModel | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseModel }}.java"
        template: base/BaseModel.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteUser | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteUser }}.java"
        template: user/SiteUser.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SitePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SitePage }}.java"
        template: page/SitePage.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteHtm | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteHtm }}.java"
        template: htm/SiteHtm.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_DynamicPage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.java"
        template: page/DynamicPage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/application.yml"
        template: java/application.yml
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.properties"
        template: log4j/log4j.properties
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.xml"
        template: log4j/log4j.xml
      - path: "{{ PROJECT_SRC }}/local/defaults.yml"
        template: local/defaults.yml
      - path: "{{ PROJECT_SRC }}/local/template.yml"
        template: local/template.yml
      - path: "{{ PROJECT_SRC }}/CONTRIBUTING"
        template: license/CONTRIBUTING
      - path: "{{ PROJECT_SRC }}/DCO"
        template: license/DCO
      - path: "{{ PROJECT_SRC }}/LICENSE"
        template: license/LICENSE
      - path: "{{ PROJECT_SRC }}/README.md"
        template: local/README.md
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/jquery.autocomplete.js"
        template: js/jQuery-Autocomplete/jquery.autocomplete.js
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/license.txt"
        template: js/jQuery-Autocomplete/license.txt
      - path: "{{ PROJECT_SRC }}-static/js/jquery-1.12.4.min.js"
        template: js/jquery-1.12.4.min.js
      - path: "{{ PROJECT_SRC }}-static/js/jquery-ui.js"
        template: js/jquery-ui.js
      - path: "{{ PROJECT_SRC }}-static/js/moment.js"
        template: js/moment.js
      - path: "{{ PROJECT_SRC }}-static/js/plotly-2.9.0.min.js"
        template: js/plotly-2.9.0.min.js
      - path: "{{ PROJECT_SRC }}-static/js/site-enUS.js"
        template: js/site-enUS.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs.js"
        template: js/sockjs.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs-map.json"
        template: js/sockjs-map.json
      - path: "{{ PROJECT_SRC }}-static/js/vertx-eventbus.js"
        template: js/vertx-eventbus.js
      - path: "{{ PROJECT_SRC }}-static/css/jquery-ui.css"
        template: css/jquery-ui.css
      - path: "{{ PROJECT_SRC }}-static/css/site-{{ PROJECT_LANG }}.css"
        template: css/site-enUS.css
      - path: "{{ PROJECT_SRC }}-static/css/w3.css"
        template: css/w3.css
      - path: "{{ PROJECT_SRC }}-static/svg/openshift.svg"
        template: svg/openshift.svg
      - path: "{{ PROJECT_SRC }}/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}-static/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}/openshift/defaults.yml"
        template: openshift/defaults.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SERVICE_1.yml"
        template: openshift/SITE_SERVICE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SECRET_1.yml"
        template: openshift/SITE_SECRET_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_ROUTE_1.yml"
        template: openshift/SITE_ROUTE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_IMAGE_STREAM_1.yml"
        template: openshift/SITE_IMAGE_STREAM_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_BUILD_CONFIG_1.yml"
        template: openshift/SITE_BUILD_CONFIG_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_DEPLOYMENT_CONFIG_1.yml"
        template: openshift/SITE_DEPLOYMENT_CONFIG_1.yml
      - path: "{{ PROJECT_SRC }}/Dockerfile"
        template: openshift/Dockerfile

CONFIG_TEMPLATE: |2
  IMPORT_DATA_ReportType:
    - typeName: Employee Giving - Bronze
    - typeName: Employee Giving - Gold
    - typeName: Expeditions
    - typeName: Village Members
    - typeName: Grantors
    - typeName: Projects (regular)
    - typeName: Programs - Parent
    - typeName: Projects - Child
    - typeName: Events
    - typeName: Annual Report
  
  DOMO_HOST_NAME: api.domo.com
  DOMO_PORT: 443
  DOMO_SSL: true
  DOMO_AUTH_TOKEN_URI: /oauth/token
  DOMO_AUTH_SCOPE: data workflow audit buzz user account dashboard
  DOMO_AUTH_CLIENT_ID: "\{\{ DOMO_AUTH_CLIENT_ID \}\}"
  DOMO_AUTH_CLIENT_SECRET: "\{\{ DOMO_AUTH_CLIENT_SECRET \}\}"
  DOMO_DATASET_CPP_URI: "\{\{ DOMO_DATASET_CPP_URI \}\}"
  
  NEOCITIES_HOST_NAME: neocities.org
  NEOCITIES_PORT: 443
  NEOCITIES_SSL: true
  NEOCITIES_API_UPLOAD: /api/upload
  NEOCITIES_API_DELETE: /api/delete
  NEOCITIES_API_LIST: /api/list
  NEOCITIES_API_INFO: /api/info
  NEOCITIES_API_RENAME: /api/rename

CONFIG_KEYS: |2
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_HOST_NAME = "DOMO_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_PORT = "DOMO_PORT";
  
  	/**
  	 * 
  	 * 
  	 **/
  	public static final String DOMO_SSL = "DOMO_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_AUTH_TOKEN_URI = "DOMO_AUTH_TOKEN_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_AUTH_SCOPE = "DOMO_AUTH_SCOPE";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_AUTH_CLIENT_ID = "DOMO_AUTH_CLIENT_ID";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_AUTH_CLIENT_SECRET = "DOMO_AUTH_CLIENT_SECRET";
  
  	/**
  	 * 
  	 **/
  	public static final String DOMO_DATASET_CPP_URI = "DOMO_DATASET_CPP_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_HOST_NAME = "NEOCITIES_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_PORT = "NEOCITIES_PORT";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_SSL = "NEOCITIES_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_API_UPLOAD = "NEOCITIES_API_UPLOAD";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_API_DELETE = "NEOCITIES_API_DELETE";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_API_LIST = "NEOCITIES_API_LIST";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_API_INFO = "NEOCITIES_API_INFO";
  
  	/**
  	 * 
  	 **/
  	public static final String NEOCITIES_API_RENAME = "NEOCITIES_API_RENAME";

WORKER_IMPORTS: |2
  import java.time.LocalDateTime;
  import io.vertx.ext.jdbc.JDBCClient;
  import io.vertx.sqlclient.Cursor;
  import io.vertx.sqlclient.SqlConnection;
  import io.vertx.ext.web.client.predicate.ResponsePredicate;
  import io.vertx.ext.auth.authentication.TokenCredentials;

WORKER_IMPORT_DATA: |2
  
  	/**	
  	 * Import initial data
  	 * Val.Complete.enUS:Importing initial data completed. 
  	 * Val.Fail.enUS:Importing initial data failed. 
  	 * Val.Skip.enUS:Skip importing data. 
  	 **/
  	private Future<Void> importData() {
  		Promise<Void> promise = Promise.promise();
  		importTimer("ChoiceDonor");
  		importTimer("ChoiceImage");
  		importTimer("ReportType");
  		return promise.future();
  	}
  
  	private Future<Void> importDataClass(String classSimpleName, ZonedDateTime startDateTime) {
  		Promise<Void> promise = Promise.promise();
  		if("ChoiceDonor".equals(classSimpleName)) {
  			importDataChoiceDonor().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if("ChoiceImage".equals(classSimpleName)) {
  			importDataChoiceImage().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), c -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if("ReportType".equals(classSimpleName)) {
  			importDataReportType().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), c -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		}
  		return promise.future();
  	}
  
  	private Future<Void> importDataChoiceDonor() {
  		Promise<Void> promise = Promise.promise();
  		webClient.post(config().getInteger(ConfigKeys.DOMO_PORT), config().getString(ConfigKeys.DOMO_HOST_NAME), config().getString(ConfigKeys.DOMO_AUTH_TOKEN_URI))
  				.expect(ResponsePredicate.SC_OK)
  				.ssl(config().getBoolean(ConfigKeys.DOMO_SSL))
  				.authentication(new UsernamePasswordCredentials(config().getString(ConfigKeys.DOMO_AUTH_CLIENT_ID), config().getString(ConfigKeys.DOMO_AUTH_CLIENT_SECRET)))
  				.putHeader("Content-Type", "application/x-www-form-urlencoded")
  				.sendForm(MultiMap.caseInsensitiveMultiMap().set("grant_type", "client_credentials").set("scope", config().getString(ConfigKeys.DOMO_AUTH_SCOPE)))
  				.onSuccess(tokenResponse -> {
  			JsonObject token = tokenResponse.bodyAsJsonObject();
  			webClient.post(config().getInteger(ConfigKeys.DOMO_PORT), config().getString(ConfigKeys.DOMO_HOST_NAME), config().getString(ConfigKeys.DOMO_DATASET_CPP_URI))
  					.ssl(config().getBoolean(ConfigKeys.DOMO_SSL))
  					.authentication(new TokenCredentials(token.getString("access_token")))
  					.sendJson(new JsonObject().put("sql", "SELECT * FROM table"))
  					.onSuccess(cppResponse -> {
  				JsonObject cppData = cppResponse.bodyAsJsonObject();
  				List<Future> futures = new ArrayList<>();
  
  				cppData.getJsonArray("rows").stream().map(o -> (JsonArray)o).forEach(row -> {
  					String donorFullName = row.getString(0);
  					Long donorId = row.getLong(1);
  					String donorAttributeName = row.getString(2);
  					Long donorAttributeId = row.getLong(3);
  					String donorInKind = row.getString(4);
  					BigDecimal donorTotal = BigDecimal.valueOf(row.getDouble(5));
  					BigDecimal donorYtd = BigDecimal.valueOf(row.getDouble(6));
  					BigDecimal donorQ1 = BigDecimal.valueOf(row.getDouble(7));
  					BigDecimal donorQ2 = BigDecimal.valueOf(row.getDouble(8));
  					BigDecimal donorQ3 = BigDecimal.valueOf(row.getDouble(9));
  					BigDecimal donorQ4 = BigDecimal.valueOf(row.getDouble(10));
  					String donorParentName = row.getString(11);
  
  					JsonObject body = new JsonObject()
  							.put("saves", new JsonArray().add("inheritPk").add("donorFullName").add("donorId").add("stateKey").add("donorAttributeName").add("donorAttributeId").add("donorInKind").add("donorTotal").add("donorYtd").add("donorQ1").add("donorQ2").add("donorQ3").add("donorQ4").add("donorParentName"))
  							.put("pk", Optional.ofNullable(donorId).map(v -> v.toString()).orElse(null))
  							.put("donorFullName", Optional.ofNullable(donorFullName).map(v -> v.trim()).orElse(null))
  							.put("donorId", Optional.ofNullable(donorId).map(v -> v.toString()).orElse(null))
  							.put("donorAttributeName", Optional.ofNullable(donorAttributeName).map(v -> v.trim()).orElse(null))
  							.put("donorAttributeId", Optional.ofNullable(donorAttributeId).map(v -> v.toString()).orElse(null))
  							.put("donorInKind", Optional.ofNullable(donorInKind).map(v -> v.toString()).orElse(null))
  							.put("donorTotal", Optional.ofNullable(donorTotal).map(v -> v.toString()).orElse(null))
  							.put("donorYtd", Optional.ofNullable(donorYtd).map(v -> v.toString()).orElse(null))
  							.put("donorQ1", Optional.ofNullable(donorQ1).map(v -> v.toString()).orElse(null))
  							.put("donorQ2", Optional.ofNullable(donorQ2).map(v -> v.toString()).orElse(null))
  							.put("donorQ3", Optional.ofNullable(donorQ3).map(v -> v.toString()).orElse(null))
  							.put("donorQ4", Optional.ofNullable(donorQ4).map(v -> v.toString()).orElse(null))
  							.put("donorParentName", Optional.ofNullable(donorParentName).map(v -> v.trim()).orElse(null))
  							;
  					JsonObject params = new JsonObject();
  					params.put("body", body);
  					params.put("path", new JsonObject());
  					params.put("cookie", new JsonObject());
  					params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  					JsonObject context = new JsonObject().put("params", params);
  					JsonObject json = new JsonObject().put("context", context);
  					futures.add(vertx.eventBus().request(String.format("choice-reports-enUS-%s", "ChoiceDonor"), json, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", "ChoiceDonor"))));
  				});
  				CompositeFuture.all(futures).onSuccess(a -> {
  					LOG.info(importDataComplete);
  					promise.complete();
  				}).onFailure(ex -> {
  					LOG.error(importDataFail, ex);
  					promise.fail(ex);
  				});
  			}).onFailure(ex -> {
  				LOG.error(importDataFail, ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(importDataFail, ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	private Future<Void> importDataChoiceImage() {
  		Promise<Void> promise = Promise.promise();
  		webClient.post(config().getInteger(ConfigKeys.DOMO_PORT), config().getString(ConfigKeys.DOMO_HOST_NAME), config().getString(ConfigKeys.DOMO_AUTH_TOKEN_URI))
  				.expect(ResponsePredicate.SC_OK)
  				.ssl(config().getBoolean(ConfigKeys.DOMO_SSL))
  				.authentication(new UsernamePasswordCredentials(config().getString(ConfigKeys.DOMO_AUTH_CLIENT_ID), config().getString(ConfigKeys.DOMO_AUTH_CLIENT_SECRET)))
  				.putHeader("Content-Type", "application/x-www-form-urlencoded")
  				.sendForm(MultiMap.caseInsensitiveMultiMap().set("grant_type", "client_credentials").set("scope", config().getString(ConfigKeys.DOMO_AUTH_SCOPE)))
  				.onSuccess(tokenResponse -> {
  			JsonObject token = tokenResponse.bodyAsJsonObject();
  			webClient.post(config().getInteger(ConfigKeys.DOMO_PORT), config().getString(ConfigKeys.DOMO_HOST_NAME), config().getString(ConfigKeys.DOMO_DATASET_CPP_URI))
  					.ssl(config().getBoolean(ConfigKeys.DOMO_SSL))
  					.authentication(new TokenCredentials(token.getString("access_token")))
  					.sendJson(new JsonObject().put("sql", "SELECT * FROM table"))
  					.onSuccess(cppResponse -> {
  				JsonObject cppData = cppResponse.bodyAsJsonObject();
  				List<Future> futures = new ArrayList<>();
  
  				cppData.getJsonArray("rows").stream().map(o -> (JsonArray)o).forEach(row -> {
  					String donorFullName = row.getString(0);
  					Long donorId = row.getLong(1);
  					String donorAttributeName = row.getString(2);
  					Long donorAttributeId = row.getLong(3);
  					String donorInKind = row.getString(4);
  					BigDecimal donorTotal = BigDecimal.valueOf(row.getDouble(5));
  					BigDecimal donorYtd = BigDecimal.valueOf(row.getDouble(6));
  					BigDecimal donorQ1 = BigDecimal.valueOf(row.getDouble(7));
  					BigDecimal donorQ2 = BigDecimal.valueOf(row.getDouble(8));
  					BigDecimal donorQ3 = BigDecimal.valueOf(row.getDouble(9));
  					BigDecimal donorQ4 = BigDecimal.valueOf(row.getDouble(10));
  					String donorParentName = row.getString(11);
  
  					JsonObject body = new JsonObject()
  							.put("saves", new JsonArray().add("inheritPk").add("donorFullName").add("donorId").add("stateKey").add("donorAttributeName").add("donorAttributeId").add("donorInKind").add("donorTotal").add("donorYtd").add("donorQ1").add("donorQ2").add("donorQ3").add("donorQ4").add("donorParentName"))
  							.put("pk", Optional.ofNullable(donorId).map(v -> v.toString()).orElse(null))
  							.put("donorFullName", Optional.ofNullable(donorFullName).map(v -> v.trim()).orElse(null))
  							.put("donorId", Optional.ofNullable(donorId).map(v -> v.toString()).orElse(null))
  							.put("donorAttributeName", Optional.ofNullable(donorAttributeName).map(v -> v.trim()).orElse(null))
  							.put("donorAttributeId", Optional.ofNullable(donorAttributeId).map(v -> v.toString()).orElse(null))
  							.put("donorInKind", Optional.ofNullable(donorInKind).map(v -> v.toString()).orElse(null))
  							.put("donorTotal", Optional.ofNullable(donorTotal).map(v -> v.toString()).orElse(null))
  							.put("donorYtd", Optional.ofNullable(donorYtd).map(v -> v.toString()).orElse(null))
  							.put("donorQ1", Optional.ofNullable(donorQ1).map(v -> v.toString()).orElse(null))
  							.put("donorQ2", Optional.ofNullable(donorQ2).map(v -> v.toString()).orElse(null))
  							.put("donorQ3", Optional.ofNullable(donorQ3).map(v -> v.toString()).orElse(null))
  							.put("donorQ4", Optional.ofNullable(donorQ4).map(v -> v.toString()).orElse(null))
  							.put("donorParentName", Optional.ofNullable(donorParentName).map(v -> v.trim()).orElse(null))
  							;
  					JsonObject params = new JsonObject();
  					params.put("body", body);
  					params.put("path", new JsonObject());
  					params.put("cookie", new JsonObject());
  					params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  					JsonObject context = new JsonObject().put("params", params);
  					JsonObject json = new JsonObject().put("context", context);
  					futures.add(vertx.eventBus().request(String.format("choice-reports-enUS-%s", "ChoiceDonor"), json, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", "ChoiceDonor"))));
  				});
  				CompositeFuture.all(futures).onSuccess(a -> {
  					LOG.info(importDataComplete);
  					promise.complete();
  				}).onFailure(ex -> {
  					LOG.error(importDataFail, ex);
  					promise.fail(ex);
  				});
  			}).onFailure(ex -> {
  				LOG.error(importDataFail, ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(importDataFail, ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	private Future<Void> importDataReportType() {
  		Promise<Void> promise = Promise.promise();
  		JsonArray reportTypes = Optional.ofNullable(config().getValue(String.format("IMPORT_DATA_%s", "ReportType"))).map(v -> v instanceof JsonArray ? (JsonArray)v : new JsonArray(v.toString())).orElse(new JsonArray());
  		List<Future> futures = new ArrayList<>();
  
  		reportTypes.stream().map(o -> (JsonObject)o).forEach(reportType -> {
  	
  			JsonObject body = new JsonObject()
  					.put(ReportType.VAR_saves, new JsonArray().add(ReportType.VAR_inheritPk).add(ReportType.VAR_typeName))
  					.put(ReportType.VAR_pk, reportType.getString(ReportType.VAR_typeName))
  					.put(ReportType.VAR_typeName, reportType.getString(ReportType.VAR_typeName))
  					;
  			JsonObject params = new JsonObject();
  			params.put("body", body);
  			params.put("path", new JsonObject());
  			params.put("cookie", new JsonObject());
  			params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  			JsonObject context = new JsonObject().put("params", params);
  			JsonObject json = new JsonObject().put("context", context);
  			futures.add(vertx.eventBus().request(String.format("choice-reports-enUS-%s", "ReportType"), json, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", "ReportType"))));
  		});
  		CompositeFuture.all(futures).onSuccess(a -> {
  			LOG.info(importDataComplete);
  			promise.complete();
  		}).onFailure(ex -> {
  			LOG.error(importDataFail, ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}

AFTER_htmStylePageLayout: |2
  		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous%20Pro%7CBellefair%7CJomhuria%7CPT%20Serif%3A700%7CStint%20Ultra%20Condensed&amp;display=swap"/>

AFTER_SiteUser: |2
  
  	/** 
  	 * {@inheritDoc}
  	 * DocValues: true
  	 * Relate: ReportNarrative.assigneeKey
  	 * HtmlRow: 4
  	 * HtmlCell: 1
  	 * DisplayName.enUS: narratives
  	 */
  	protected void _narrativeKeys(List<Long> l) {
  	}
  
  	/**  
  	 * {@inheritDoc}
  	 * DocValues: true
  	 * Relate: ReportEvent.assigneeKey
  	 * HtmlRow: 4
  	 * HtmlCell: 1
  	 * DisplayName.enUS: events
  	 */
  	protected void _eventKeys(List<Long> l) {
  	}
  
  	/**  
  	 * {@inheritDoc}
  	 * DocValues: true
  	 * Relate: ReportSchedule.pullOwnerKey
  	 * HtmlRow: 4
  	 * HtmlCell: 1
  	 * DisplayName.enUS: events
  	 */
  	protected void _pullOwnerReportScheduleKeys(List<Long> l) {
  	}
  
  	/**  
  	 * {@inheritDoc}
  	 * DocValues: true
  	 * Relate: ReportSchedule.finalOwnerKey
  	 * HtmlRow: 4
  	 * HtmlCell: 1
  	 * DisplayName.enUS: events
  	 */
  	protected void _finalOwnerReportScheduleKeys(List<Long> l) {
  	}

README_END: |

